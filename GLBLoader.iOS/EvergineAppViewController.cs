// <auto-generated/>

using System;
using System.Runtime.InteropServices;
using System.Threading;

using CoreAnimation;
using CoreGraphics;
using Foundation;
using Metal;
using UIKit;
using System.Numerics;
using Evergine.iOS;
using Evergine.Framework.Graphics;
using Evergine.Framework.Services;
using Evergine.Common.Graphics;
using System.Diagnostics;

namespace GLBLoader.iOS
{
    public partial class EvergineAppViewController : EvergineViewController
    {
        static bool Windowed = true;
        static bool VSync = true;

        private IOSWindowsSystem windowsSystem;

        public EvergineAppViewController(ObjCRuntime.NativeHandle handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // Create the App
            MyApplication application = new MyApplication();

            // Create services
            this.windowsSystem = new IOSWindowsSystem(this);
            application.Container.RegisterInstance(windowsSystem as WindowsSystem);
            var surface = windowsSystem.CreateSurface(0, 0);

            ConfigureGraphicsContext(application, surface);

            Stopwatch clockTimer = Stopwatch.StartNew();
            windowsSystem.Run(
            () =>
            {
                application.Initialize();
            },
            () =>
            {
                var gameTime = clockTimer.Elapsed;
                clockTimer.Restart();

                application.UpdateFrame(gameTime);
                application.DrawFrame(gameTime);
            });

            this.LoadAction?.Invoke();
        }

        private static void ConfigureGraphicsContext(MyApplication application, Surface surface)
        {
            GraphicsContext graphicsContext = new global::Evergine.Metal.MTLGraphicsContext();
            graphicsContext.CreateDevice();
            SwapChainDescription swapChainDescription = new SwapChainDescription()
            {
                SurfaceInfo = surface.SurfaceInfo,
                Width = surface.Width,
                Height = surface.Height,
                ColorTargetFormat = PixelFormat.B8G8R8A8_UNorm,
                ColorTargetFlags = TextureFlags.RenderTarget | TextureFlags.ShaderResource,
                DepthStencilTargetFormat = PixelFormat.D32_Float,
                DepthStencilTargetFlags = TextureFlags.DepthStencil,
                SampleCount = TextureSampleCount.None,
                IsWindowed = Windowed,
                RefreshRate = 60
            };
            var swapChain = graphicsContext.CreateSwapChain(swapChainDescription);
            swapChain.VerticalSync = VSync;
            swapChain.FrameBuffer.IntermediateBufferAssociated = false;

            var graphicsPresenter = application.Container.Resolve<GraphicsPresenter>();
            var firstDisplay = new Display(surface, swapChain);
            graphicsPresenter.AddDisplay("DefaultDisplay", firstDisplay);

            application.Container.RegisterInstance(graphicsContext);
        }
    }
}
